import numpy as np
import matplotlib.pyplot as plt

# Initialization
def initialize_population(pop_size, num_items):
    return np.random.randint(2, size=(pop_size, num_items))

# Fitness Evaluation
def fitness(individual, profits, weights, capacities):
    total_profit = np.sum(profits * individual)
    total_weight = np.dot(weights, individual)
    if any(total_weight > capacities):
        return 0  # Penalize solutions that exceed capacities
    return total_profit

# Selection
def select_parents(population, fitnesses, num_parents):
    parents = np.zeros((num_parents, population.shape[1]))
    for parent_num in range(num_parents):
        max_fitness_idx = np.where(fitnesses == np.max(fitnesses))
        max_fitness_idx = max_fitness_idx[0][0]
        parents[parent_num, :] = population[max_fitness_idx, :]
        fitnesses[max_fitness_idx] = -999999
    return parents

# Crossover
def crossover(parents, offspring_size, crossover_prob):
    offspring = np.empty(offspring_size)
    for k in range(offspring_size[0]):
        if np.random.rand() < crossover_prob:
            crossover_point = np.uint8(np.random.randint(1, offspring_size[1]-1))
            parent1_idx = k % parents.shape[0]
            parent2_idx = (k+1) % parents.shape[0]
            offspring[k, 0:crossover_point] = parents[parent1_idx, 0:crossover_point]
            offspring[k, crossover_point:] = parents[parent2_idx, crossover_point:]
        else:
            offspring[k, :] = parents[k % parents.shape[0], :]
    return offspring

# Mutation
def mutate(offspring_crossover, mutation_prob):
    for idx in range(offspring_crossover.shape[0]):
        for gene_idx in range(offspring_crossover.shape[1]):
            if np.random.rand() < mutation_prob:
                offspring_crossover[idx, gene_idx] = 1 - offspring_crossover[idx, gene_idx]
    return offspring_crossover

# GA parameters
num_weights = 3
num_items = 6
profits = np.random.randint(1, 100, size=num_items)
weights = np.random.randint(1, 50, size=(num_weights, num_items))
capacities = np.random.randint(50, 100, size=num_weights)

pop_size = 50
num_parents = 10
max_generations = 100
crossover_prob = 0.8
mutation_prob = 0.1

# Print GA parameters
print(f"Number of Variables in the Problem: {num_items}")
print(f"Constraints (Capacities): {capacities}")
print(f"Initial Population Size: {pop_size}")
print(f"Number of Generations: {max_generations}")
print(f"Crossover Probability: {crossover_prob}")
print(f"Mutation Probability: {mutation_prob}")

# GA execution
population = initialize_population(pop_size, num_items)
best_fitness_history = []

for generation in range(max_generations):
    fitnesses = np.array([fitness(individual, profits, weights, capacities) for individual in population])
    best_fitness_history.append(np.max(fitnesses))
    parents = select_parents(population, fitnesses, num_parents)
    offspring_crossover = crossover(parents, (pop_size - parents.shape[0], num_items), crossover_prob)
    offspring_mutation = mutate(offspring_crossover, mutation_prob)
    population[0:parents.shape[0], :] = parents
    population[parents.shape[0]:, :] = offspring_mutation

# Best solution
best_idx = np.argmax(fitnesses)
print("\nBest Solution:", population[best_idx, :])
print("Best Solution Fitness:", fitness(population[best_idx, :], profits, weights, capacities))

# Plotting the performance graph
plt.plot(best_fitness_history)
plt.title('GA Performance Over Generations')
plt.xlabel('Generation')
plt.ylabel('Best Fitness')
plt.show()
